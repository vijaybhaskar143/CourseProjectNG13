{"ast":null,"code":"import _classCallCheck from \"C:\\\\ABC\\\\Angular13\\\\CourseProject\\\\CourseProject-Ol\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\ABC\\\\Angular13\\\\CourseProject\\\\CourseProject-Ol\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\nimport { map, take } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nimport * as i2 from \"@angular/router\";\nexport var AuthGuard = /*#__PURE__*/function () {\n  function AuthGuard(authService, router) {\n    _classCallCheck(this, AuthGuard);\n\n    this.authService = authService;\n    this.router = router;\n  }\n\n  _createClass(AuthGuard, [{\n    key: \"canActivate\",\n    value: function canActivate(route, router) {\n      var _this = this;\n\n      return this.authService.user.pipe(take(1), map(function (user) {\n        var isAuth = !!user;\n\n        if (isAuth) {\n          return true;\n        }\n\n        return _this.router.createUrlTree(['/auth']);\n      }) // tap(isAuth => {\n      //   if (!isAuth) {\n      //     this.router.navigate(['/auth']);\n      //   }\n      // })\n      );\n    }\n  }]);\n\n  return AuthGuard;\n}();\n\nAuthGuard.ɵfac = function AuthGuard_Factory(t) {\n  return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router));\n};\n\nAuthGuard.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthGuard,\n  factory: AuthGuard.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/ABC/Angular13/CourseProject/CourseProject-Ol/src/app/auth/auth.guard.ts"],"names":["ActivatedRouteSnapshot","RouterStateSnapshot","Router","UrlTree","map","take","AuthService","i0","i1","i2","AuthGuard","authService","router","route","user","pipe","isAuth","createUrlTree","ɵfac","AuthGuard_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";;AAAA,SAASA,sBAAT,EAAiCC,mBAAjC,EAAsDC,MAAtD,EAA8DC,OAA9D,QAA6E,iBAA7E;AACA,SAASC,GAAT,EAAcC,IAAd,QAA0B,gBAA1B;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,iBAApB;AACA,WAAaC,SAAb;AACI,qBAAYC,WAAZ,EAAyBC,MAAzB,EAAiC;AAAA;;AAC7B,SAAKD,WAAL,GAAmBA,WAAnB;AACA,SAAKC,MAAL,GAAcA,MAAd;AACH;;AAJL;AAAA;AAAA,WAKI,qBAAYC,KAAZ,EAAmBD,MAAnB,EAA2B;AAAA;;AACvB,aAAO,KAAKD,WAAL,CAAiBG,IAAjB,CAAsBC,IAAtB,CAA2BV,IAAI,CAAC,CAAD,CAA/B,EAAoCD,GAAG,CAAC,UAAAU,IAAI,EAAI;AACnD,YAAME,MAAM,GAAG,CAAC,CAACF,IAAjB;;AACA,YAAIE,MAAJ,EAAY;AACR,iBAAO,IAAP;AACH;;AACD,eAAO,KAAI,CAACJ,MAAL,CAAYK,aAAZ,CAA0B,CAAC,OAAD,CAA1B,CAAP;AACH,OAN6C,CAAvC,CAOP;AACA;AACA;AACA;AACA;AAXO,OAAP;AAaH;AAnBL;;AAAA;AAAA;;AAqBAP,SAAS,CAACQ,IAAV,GAAiB,SAASC,iBAAT,CAA2BC,CAA3B,EAA8B;AAAE,SAAO,KAAKA,CAAC,IAAIV,SAAV,EAAqBH,EAAE,CAACc,QAAH,CAAYb,EAAE,CAACF,WAAf,CAArB,EAAkDC,EAAE,CAACc,QAAH,CAAYZ,EAAE,CAACP,MAAf,CAAlD,CAAP;AAAmF,CAApI;;AACAQ,SAAS,CAACY,KAAV,GAAkB,aAAcf,EAAE,CAACgB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEd,SAAT;AAAoBe,EAAAA,OAAO,EAAEf,SAAS,CAACQ,IAAvC;AAA6CQ,EAAAA,UAAU,EAAE;AAAzD,CAAtB,CAAhC","sourcesContent":["import { ActivatedRouteSnapshot, RouterStateSnapshot, Router, UrlTree } from '@angular/router';\r\nimport { map, take } from 'rxjs/operators';\r\nimport { AuthService } from './auth.service';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./auth.service\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class AuthGuard {\r\n    constructor(authService, router) {\r\n        this.authService = authService;\r\n        this.router = router;\r\n    }\r\n    canActivate(route, router) {\r\n        return this.authService.user.pipe(take(1), map(user => {\r\n            const isAuth = !!user;\r\n            if (isAuth) {\r\n                return true;\r\n            }\r\n            return this.router.createUrlTree(['/auth']);\r\n        })\r\n        // tap(isAuth => {\r\n        //   if (!isAuth) {\r\n        //     this.router.navigate(['/auth']);\r\n        //   }\r\n        // })\r\n        );\r\n    }\r\n}\r\nAuthGuard.ɵfac = function AuthGuard_Factory(t) { return new (t || AuthGuard)(i0.ɵɵinject(i1.AuthService), i0.ɵɵinject(i2.Router)); };\r\nAuthGuard.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthGuard, factory: AuthGuard.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}
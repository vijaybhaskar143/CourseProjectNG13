{"ast":null,"code":"import _classCallCheck from \"C:\\\\ABC\\\\Angular13\\\\CourseProject\\\\CourseProject-Ol\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\ABC\\\\Angular13\\\\CourseProject\\\\CourseProject-Ol\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpRequest, HttpHandler, HttpParams } from '@angular/common/http';\nimport { take, exhaustMap } from 'rxjs/operators';\nimport { AuthService } from './auth.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"./auth.service\";\nexport var AuthInterceptorService = /*#__PURE__*/function () {\n  function AuthInterceptorService(authService) {\n    _classCallCheck(this, AuthInterceptorService);\n\n    this.authService = authService;\n  }\n\n  _createClass(AuthInterceptorService, [{\n    key: \"intercept\",\n    value: function intercept(req, next) {\n      return this.authService.user.pipe(take(1), exhaustMap(function (user) {\n        if (!user) {\n          return next.handle(req);\n        }\n\n        var modifiedReq = req.clone({\n          params: new HttpParams().set('auth', user.token)\n        });\n        return next.handle(modifiedReq);\n      }));\n    }\n  }]);\n\n  return AuthInterceptorService;\n}();\n\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) {\n  return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService));\n};\n\nAuthInterceptorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthInterceptorService,\n  factory: AuthInterceptorService.ɵfac\n});","map":{"version":3,"sources":["C:/ABC/Angular13/CourseProject/CourseProject-Ol/src/app/auth/auth-interceptor.service.ts"],"names":["HttpRequest","HttpHandler","HttpParams","take","exhaustMap","AuthService","i0","i1","AuthInterceptorService","authService","req","next","user","pipe","handle","modifiedReq","clone","params","set","token","ɵfac","AuthInterceptorService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory"],"mappings":";;AAAA,SAASA,WAAT,EAAsBC,WAAtB,EAAmCC,UAAnC,QAAqD,sBAArD;AACA,SAASC,IAAT,EAAeC,UAAf,QAAiC,gBAAjC;AACA,SAASC,WAAT,QAA4B,gBAA5B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gBAApB;AACA,WAAaC,sBAAb;AACI,kCAAYC,WAAZ,EAAyB;AAAA;;AACrB,SAAKA,WAAL,GAAmBA,WAAnB;AACH;;AAHL;AAAA;AAAA,WAII,mBAAUC,GAAV,EAAeC,IAAf,EAAqB;AACjB,aAAO,KAAKF,WAAL,CAAiBG,IAAjB,CAAsBC,IAAtB,CAA2BV,IAAI,CAAC,CAAD,CAA/B,EAAoCC,UAAU,CAAC,UAAAQ,IAAI,EAAI;AAC1D,YAAI,CAACA,IAAL,EAAW;AACP,iBAAOD,IAAI,CAACG,MAAL,CAAYJ,GAAZ,CAAP;AACH;;AACD,YAAMK,WAAW,GAAGL,GAAG,CAACM,KAAJ,CAAU;AAC1BC,UAAAA,MAAM,EAAE,IAAIf,UAAJ,GAAiBgB,GAAjB,CAAqB,MAArB,EAA6BN,IAAI,CAACO,KAAlC;AADkB,SAAV,CAApB;AAGA,eAAOR,IAAI,CAACG,MAAL,CAAYC,WAAZ,CAAP;AACH,OARoD,CAA9C,CAAP;AASH;AAdL;;AAAA;AAAA;;AAgBAP,sBAAsB,CAACY,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,SAAO,KAAKA,CAAC,IAAId,sBAAV,EAAkCF,EAAE,CAACiB,QAAH,CAAYhB,EAAE,CAACF,WAAf,CAAlC,CAAP;AAAwE,CAAnJ;;AACAG,sBAAsB,CAACgB,KAAvB,GAA+B,aAAclB,EAAE,CAACmB,kBAAH,CAAsB;AAAEN,EAAAA,KAAK,EAAEX,sBAAT;AAAiCkB,EAAAA,OAAO,EAAElB,sBAAsB,CAACY;AAAjE,CAAtB,CAA7C","sourcesContent":["import { HttpRequest, HttpHandler, HttpParams } from '@angular/common/http';\r\nimport { take, exhaustMap } from 'rxjs/operators';\r\nimport { AuthService } from './auth.service';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"./auth.service\";\r\nexport class AuthInterceptorService {\r\n    constructor(authService) {\r\n        this.authService = authService;\r\n    }\r\n    intercept(req, next) {\r\n        return this.authService.user.pipe(take(1), exhaustMap(user => {\r\n            if (!user) {\r\n                return next.handle(req);\r\n            }\r\n            const modifiedReq = req.clone({\r\n                params: new HttpParams().set('auth', user.token)\r\n            });\r\n            return next.handle(modifiedReq);\r\n        }));\r\n    }\r\n}\r\nAuthInterceptorService.ɵfac = function AuthInterceptorService_Factory(t) { return new (t || AuthInterceptorService)(i0.ɵɵinject(i1.AuthService)); };\r\nAuthInterceptorService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthInterceptorService, factory: AuthInterceptorService.ɵfac });\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:\\\\ABC\\\\Angular13\\\\CourseProject\\\\CourseProject-Ol\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\ABC\\\\Angular13\\\\CourseProject\\\\CourseProject-Ol\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { HttpClient } from '@angular/common/http';\nimport { Router } from '@angular/router';\nimport { catchError, tap } from 'rxjs/operators';\nimport { throwError, BehaviorSubject } from 'rxjs';\nimport { User } from './user.model';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport var AuthService = /*#__PURE__*/function () {\n  function AuthService(http, router) {\n    _classCallCheck(this, AuthService);\n\n    this.http = http;\n    this.router = router;\n    this.user = new BehaviorSubject(null);\n  }\n\n  _createClass(AuthService, [{\n    key: \"signup\",\n    value: function signup(email, password) {\n      var _this = this;\n\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAuMdyJJBa6vf6Ma7OzgEqgPtfy4RAVdAI', {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(function (resData) {\n        _this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n  }, {\n    key: \"login\",\n    value: function login(email, password) {\n      var _this2 = this;\n\n      return this.http.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAuMdyJJBa6vf6Ma7OzgEqgPtfy4RAVdAI', {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(function (resData) {\n        _this2.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n  }, {\n    key: \"autoLogin\",\n    value: function autoLogin() {\n      var userData = JSON.parse(localStorage.getItem('userData'));\n\n      if (!userData) {\n        return;\n      }\n\n      var loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        var expirationDuration = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationDuration);\n      }\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      this.user.next(null);\n      this.router.navigate(['/auth']);\n      localStorage.removeItem('userData');\n\n      if (this.tokenExpirationTimer) {\n        clearTimeout(this.tokenExpirationTimer);\n      }\n\n      this.tokenExpirationTimer = null;\n    }\n  }, {\n    key: \"autoLogout\",\n    value: function autoLogout(expirationDuration) {\n      var _this3 = this;\n\n      this.tokenExpirationTimer = setTimeout(function () {\n        _this3.logout();\n      }, expirationDuration);\n    }\n  }, {\n    key: \"handleAuthentication\",\n    value: function handleAuthentication(email, userId, token, expiresIn) {\n      var expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\n      var user = new User(email, userId, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(expiresIn * 1000);\n      localStorage.setItem('userData', JSON.stringify(user));\n    }\n  }, {\n    key: \"handleError\",\n    value: function handleError(errorRes) {\n      var errorMessage = 'An unknown error occurred!';\n\n      if (!errorRes.error || !errorRes.error.error) {\n        return throwError(errorMessage);\n      }\n\n      switch (errorRes.error.error.message) {\n        case 'EMAIL_EXISTS':\n          errorMessage = 'This email exists already';\n          break;\n\n        case 'EMAIL_NOT_FOUND':\n          errorMessage = 'This email does not exist.';\n          break;\n\n        case 'INVALID_PASSWORD':\n          errorMessage = 'This password is not correct.';\n          break;\n      }\n\n      return throwError(errorMessage);\n    }\n  }]);\n\n  return AuthService;\n}();\n\nAuthService.ɵfac = function AuthService_Factory(t) {\n  return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n};\n\nAuthService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: AuthService,\n  factory: AuthService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/ABC/Angular13/CourseProject/CourseProject-Ol/src/app/auth/auth.service.ts"],"names":["HttpClient","Router","catchError","tap","throwError","BehaviorSubject","User","i0","i1","i2","AuthService","http","router","user","email","password","post","returnSecureToken","pipe","handleError","resData","handleAuthentication","localId","idToken","expiresIn","userData","JSON","parse","localStorage","getItem","loadedUser","id","_token","Date","_tokenExpirationDate","token","next","expirationDuration","getTime","autoLogout","navigate","removeItem","tokenExpirationTimer","clearTimeout","setTimeout","logout","userId","expirationDate","setItem","stringify","errorRes","errorMessage","error","message","ɵfac","AuthService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","factory","providedIn"],"mappings":"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","sourcesContent":["import { HttpClient } from '@angular/common/http';\r\nimport { Router } from '@angular/router';\r\nimport { catchError, tap } from 'rxjs/operators';\r\nimport { throwError, BehaviorSubject } from 'rxjs';\r\nimport { User } from './user.model';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"@angular/common/http\";\r\nimport * as i2 from \"@angular/router\";\r\nexport class AuthService {\r\n    constructor(http, router) {\r\n        this.http = http;\r\n        this.router = router;\r\n        this.user = new BehaviorSubject(null);\r\n    }\r\n    signup(email, password) {\r\n        return this.http\r\n            .post('https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=AIzaSyAuMdyJJBa6vf6Ma7OzgEqgPtfy4RAVdAI', {\r\n            email: email,\r\n            password: password,\r\n            returnSecureToken: true\r\n        })\r\n            .pipe(catchError(this.handleError), tap(resData => {\r\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\r\n        }));\r\n    }\r\n    login(email, password) {\r\n        return this.http\r\n            .post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyAuMdyJJBa6vf6Ma7OzgEqgPtfy4RAVdAI', {\r\n            email: email,\r\n            password: password,\r\n            returnSecureToken: true\r\n        })\r\n            .pipe(catchError(this.handleError), tap(resData => {\r\n            this.handleAuthentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\r\n        }));\r\n    }\r\n    autoLogin() {\r\n        const userData = JSON.parse(localStorage.getItem('userData'));\r\n        if (!userData) {\r\n            return;\r\n        }\r\n        const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\r\n        if (loadedUser.token) {\r\n            this.user.next(loadedUser);\r\n            const expirationDuration = new Date(userData._tokenExpirationDate).getTime() -\r\n                new Date().getTime();\r\n            this.autoLogout(expirationDuration);\r\n        }\r\n    }\r\n    logout() {\r\n        this.user.next(null);\r\n        this.router.navigate(['/auth']);\r\n        localStorage.removeItem('userData');\r\n        if (this.tokenExpirationTimer) {\r\n            clearTimeout(this.tokenExpirationTimer);\r\n        }\r\n        this.tokenExpirationTimer = null;\r\n    }\r\n    autoLogout(expirationDuration) {\r\n        this.tokenExpirationTimer = setTimeout(() => {\r\n            this.logout();\r\n        }, expirationDuration);\r\n    }\r\n    handleAuthentication(email, userId, token, expiresIn) {\r\n        const expirationDate = new Date(new Date().getTime() + expiresIn * 1000);\r\n        const user = new User(email, userId, token, expirationDate);\r\n        this.user.next(user);\r\n        this.autoLogout(expiresIn * 1000);\r\n        localStorage.setItem('userData', JSON.stringify(user));\r\n    }\r\n    handleError(errorRes) {\r\n        let errorMessage = 'An unknown error occurred!';\r\n        if (!errorRes.error || !errorRes.error.error) {\r\n            return throwError(errorMessage);\r\n        }\r\n        switch (errorRes.error.error.message) {\r\n            case 'EMAIL_EXISTS':\r\n                errorMessage = 'This email exists already';\r\n                break;\r\n            case 'EMAIL_NOT_FOUND':\r\n                errorMessage = 'This email does not exist.';\r\n                break;\r\n            case 'INVALID_PASSWORD':\r\n                errorMessage = 'This password is not correct.';\r\n                break;\r\n        }\r\n        return throwError(errorMessage);\r\n    }\r\n}\r\nAuthService.ɵfac = function AuthService_Factory(t) { return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router)); };\r\nAuthService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: AuthService, factory: AuthService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _classCallCheck from \"C:\\\\ABC\\\\Angular13\\\\CourseProject\\\\CourseProject-Ol\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\classCallCheck.js\";\nimport _createClass from \"C:\\\\ABC\\\\Angular13\\\\CourseProject\\\\CourseProject-Ol\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\createClass.js\";\nimport { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { DataStorageService } from '../shared/data-storage.service';\nimport { RecipeService } from './recipe.service';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../shared/data-storage.service\";\nimport * as i2 from \"./recipe.service\";\nexport var RecipesResolverService = /*#__PURE__*/function () {\n  function RecipesResolverService(dataStorageService, recipesService) {\n    _classCallCheck(this, RecipesResolverService);\n\n    this.dataStorageService = dataStorageService;\n    this.recipesService = recipesService;\n  }\n\n  _createClass(RecipesResolverService, [{\n    key: \"resolve\",\n    value: function resolve(route, state) {\n      var recipes = this.recipesService.getRecipes();\n\n      if (recipes.length === 0) {\n        return this.dataStorageService.fetchRecipes();\n      } else {\n        return recipes;\n      }\n    }\n  }]);\n\n  return RecipesResolverService;\n}();\n\nRecipesResolverService.ɵfac = function RecipesResolverService_Factory(t) {\n  return new (t || RecipesResolverService)(i0.ɵɵinject(i1.DataStorageService), i0.ɵɵinject(i2.RecipeService));\n};\n\nRecipesResolverService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: RecipesResolverService,\n  factory: RecipesResolverService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"sources":["C:/ABC/Angular13/CourseProject/CourseProject-Ol/src/app/recipes/recipes-resolver.service.ts"],"names":["ActivatedRouteSnapshot","RouterStateSnapshot","DataStorageService","RecipeService","i0","i1","i2","RecipesResolverService","dataStorageService","recipesService","route","state","recipes","getRecipes","length","fetchRecipes","ɵfac","RecipesResolverService_Factory","t","ɵɵinject","ɵprov","ɵɵdefineInjectable","token","factory","providedIn"],"mappings":";;AAAA,SAASA,sBAAT,EAAiCC,mBAAjC,QAA4D,iBAA5D;AACA,SAASC,kBAAT,QAAmC,gCAAnC;AACA,SAASC,aAAT,QAA8B,kBAA9B;AACA,OAAO,KAAKC,EAAZ,MAAoB,eAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,gCAApB;AACA,OAAO,KAAKC,EAAZ,MAAoB,kBAApB;AACA,WAAaC,sBAAb;AACI,kCAAYC,kBAAZ,EAAgCC,cAAhC,EAAgD;AAAA;;AAC5C,SAAKD,kBAAL,GAA0BA,kBAA1B;AACA,SAAKC,cAAL,GAAsBA,cAAtB;AACH;;AAJL;AAAA;AAAA,WAKI,iBAAQC,KAAR,EAAeC,KAAf,EAAsB;AAClB,UAAMC,OAAO,GAAG,KAAKH,cAAL,CAAoBI,UAApB,EAAhB;;AACA,UAAID,OAAO,CAACE,MAAR,KAAmB,CAAvB,EAA0B;AACtB,eAAO,KAAKN,kBAAL,CAAwBO,YAAxB,EAAP;AACH,OAFD,MAGK;AACD,eAAOH,OAAP;AACH;AACJ;AAbL;;AAAA;AAAA;;AAeAL,sBAAsB,CAACS,IAAvB,GAA8B,SAASC,8BAAT,CAAwCC,CAAxC,EAA2C;AAAE,SAAO,KAAKA,CAAC,IAAIX,sBAAV,EAAkCH,EAAE,CAACe,QAAH,CAAYd,EAAE,CAACH,kBAAf,CAAlC,EAAsEE,EAAE,CAACe,QAAH,CAAYb,EAAE,CAACH,aAAf,CAAtE,CAAP;AAA8G,CAAzL;;AACAI,sBAAsB,CAACa,KAAvB,GAA+B,aAAchB,EAAE,CAACiB,kBAAH,CAAsB;AAAEC,EAAAA,KAAK,EAAEf,sBAAT;AAAiCgB,EAAAA,OAAO,EAAEhB,sBAAsB,CAACS,IAAjE;AAAuEQ,EAAAA,UAAU,EAAE;AAAnF,CAAtB,CAA7C","sourcesContent":["import { ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\r\nimport { DataStorageService } from '../shared/data-storage.service';\r\nimport { RecipeService } from './recipe.service';\r\nimport * as i0 from \"@angular/core\";\r\nimport * as i1 from \"../shared/data-storage.service\";\r\nimport * as i2 from \"./recipe.service\";\r\nexport class RecipesResolverService {\r\n    constructor(dataStorageService, recipesService) {\r\n        this.dataStorageService = dataStorageService;\r\n        this.recipesService = recipesService;\r\n    }\r\n    resolve(route, state) {\r\n        const recipes = this.recipesService.getRecipes();\r\n        if (recipes.length === 0) {\r\n            return this.dataStorageService.fetchRecipes();\r\n        }\r\n        else {\r\n            return recipes;\r\n        }\r\n    }\r\n}\r\nRecipesResolverService.ɵfac = function RecipesResolverService_Factory(t) { return new (t || RecipesResolverService)(i0.ɵɵinject(i1.DataStorageService), i0.ɵɵinject(i2.RecipeService)); };\r\nRecipesResolverService.ɵprov = /*@__PURE__*/ i0.ɵɵdefineInjectable({ token: RecipesResolverService, factory: RecipesResolverService.ɵfac, providedIn: 'root' });\r\n"]},"metadata":{},"sourceType":"module"}